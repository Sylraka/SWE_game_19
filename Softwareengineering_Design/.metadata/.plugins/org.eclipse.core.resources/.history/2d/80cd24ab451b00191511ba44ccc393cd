package application.Applikationsschicht.Logik;

import java.util.ArrayList;
import java.util.Map;

import application.statemachine.impl.StateMachineImpl;
import application.statemachine.port.StateMachine;
import application.statemachine.port.StateMachine.State;
import application.statemachine.port.StateMachine.State.S;;

public class verwaltungImpl {
	private Spieler[] spieler;
	private Spieler aktuellerSpieler;

	private Figur[] figuren;

	private Map<Figur, Integer> moeglicheSpielzuege;

	private boolean istEinfacheVariante;
	private int wurf;

	StateMachine stateMachine;

	public void wuerfeln(Spieler aktuellerSpieler) {
		Figur[] figurenDesSpielers;

		this.wurf++;

		int augenzahl = getAugenzahl();

		this.aktuellerSpieler = aktuellerSpieler;

		figurenDesSpielers = (getFiguren(aktuellerSpieler));

		// Es ist eine Figur im Spiel -> Schritte der Figur berechnen
		if (istEineFigurImSpiel(figurenDesSpielers)) {
			berechneMoeglicheSpielzuege(figurenDesSpielers, augenzahl);
			if (!this.istEinfacheVariante) {
				entferneUnmoeglicheSchritte(figurenDesSpielers);
			}
			this.stateMachine.setState(S.Wahl);
		}
		// Es ist noch keine Figur im Spiel -> 3 mal für 6er Würfeln
		else {
			if (augenzahl == 6) {
				setAufStartFeld();
				this.stateMachine.setState(S.Initial);
			} else {
				if (wurf == 3) {
					this.stateMachine.setState(S.Initial);
				} else {
					// TODO: Erneutes würfeln geht automatisch?
				}

			}
		}
	}

	private int getAugenzahl() {
		return (int) (Math.random() * 6) + 1;
	}

	private Figur[] getFiguren(Spieler aktuellerSpieler) {
		int index = aktuellerSpieler.getSpielerNummer() * 3;
		Figur[] figuren = { this.figuren[index], this.figuren[index + 1], this.figuren[index + 2] };

		return figuren;
	}

	private boolean istEineFigurImSpiel(Figur[] figuren) {
		for (Figur figur : figuren) {
			if (!figur.isHeimatsfeld())
				return true;
		}
		return false;

	}

	private void berechneMoeglicheSpielzuege(Figur[] figurenDesSpielers, int augenzahl) {
		for (Figur figur : figurenDesSpielers) {
			// Wurde das Ende der 48 Felder erreicht, geht es von vorne wieder los
			this.moeglicheSpielzuege.put(figur, (figur.getPosition() + augenzahl) % 48);

		}
	}

	private void entferneUnmoeglicheSchritte(Figur[] figurenDesSpielers) {
		for (Figur figur : figurenDesSpielers) {
			for (Figur figurImSpiel : figurenDesSpielers) {
				// Ist eine Figur des Spielers auf dem neuen Feld einer anderen Figur wird der
				// Spielzug entfernt
				if (moeglicheSpielzuege.get(figur) == figurImSpiel.getPosition()) {
					this.moeglicheSpielzuege.remove(figur);
					break;
				}
			}
		}
	}

	private void setAufStartFeld(Figur[] figurenDesSpielers) {
		for (Figur figur : figurenDesSpielers) {
			if (figur.isHeimatsfeld()) {
				this.figuren[figur.getFigurNummer()].setPosition(this.aktuellerSpieler.getSpielerNummer() * 12);
			}
		}
	}

	private void figurnummerEingeben(int figurNummer) {

		int position = getNeuePosition(figurNummer);

		if (istFeldBesetzt(position)) {
			this.stateMachine.setState(S.Frage);
		} else {
			setNeuePosition(figurNummer, position);
			this.stateMachine.setState(S.Initial);
		}

	}

	private int getNeuePosition(int figurNummer) {
		return moeglicheSpielzuege.get(figuren[figurNummer]);
	}

	private boolean istFeldBesetzt(int position) {
		for (Figur figur : figuren) {
			if (figur.getPosition() == position) {
				return true;
			}
		}
		return false;
	}

	private void setNeuePosition(int figurNummer, int position) {
		this.figuren[figurNummer].setPosition(position);
	}

}
