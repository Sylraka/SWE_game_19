package application.Applikationsschicht.Logik;

import java.util.ArrayList;
import java.util.Map;

import application.statemachine.impl.StateMachineImpl;
import application.statemachine.port.StateMachine;;

public class verwaltungImpl {
	private Spieler[] spieler;
	private Spieler aktuellerSpieler;

	private Figur[] figuren;
	private Map<Figur, Integer> moeglicheSpielzuege;

	private int augenzahl;

	StateMachine stateMachine;

	public void wuerfeln(Spieler aktuellerSpieler) {
		this.aktuellerSpieler = aktuellerSpieler;
		augenzahl = getAugenzahl();
	}

	private int getAugenzahl() {
		return (int) (Math.random() * 6) + 1;
	}

	private Figur[] getFiguren(Spieler aktuellerSpieler) {
		int index = aktuellerSpieler.getSpielerNummer() * 3;
		Figur[] figuren = { this.figuren[index], this.figuren[index + 1], this.figuren[index + 2] };

		return figuren;
	}

	private boolean istEineFigurImSpiel(Figur[] figuren) {
		for (Figur figur : figuren) {
			if (!figur.isHeimatsfeld())
				return true;
		}
		return false;

	}

	private void figurnummerEingeben(int figurNummer) {

		int position = getNeuePosition(figurNummer);

		if (istFeldBesetzt(position)) {
			this.stateMachine.setState(new State(Frage));
		} else {
			setNeuePosition(figurNummer, position);
			this.stateMachine.setState(new State(Initial));
		}

	}

	private int getNeuePosition(int figurNummer) {
		return moeglicheSpielzuege.get(figuren[figurNummer]);
	}

	private boolean istFeldBesetzt(int position) {
		for (Figur figur : figuren) {
			if (figur.getPosition() == position) {
				return true;
			}
		}
		return false;
	}

	private void setNeuePosition(int figurNummer, int position) {
		this.figuren[figurNummer].setPosition(position);
	}

}
